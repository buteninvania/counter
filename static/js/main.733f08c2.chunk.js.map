{"version":3,"sources":["components/counter/counter.module.css","components/settings/settings.module.css","components/button/button.module.css","components/error/error.module.css","components/counter/counter_types.ts","components/button/Button.tsx","components/error/Error.tsx","components/counter/counterReducer.tsx","components/settings/Settings.tsx","components/counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Types","Button","error","restProps","finalClassName","s","default","className","SpanError","message","spanError","counterInitialState","isShowSettings","maxNumber","minNumber","counterNumber","counterReducer","state","action","type","Change","payload","changeType","value","ToggleShowSettings","SetCounterNumber","mutableKey","SetError","counterActions","Settings","dispatch","onClickSettings","wrapper","control","children","disabled","onClick","conservation","e","currentTarget","innerHTML","Counter","console","log","useEffect","max","Number","localStorage","getItem","min","useReducer","setItem","JSON","stringify","counterWrapper","header","active","counter","red","buttonsWrapper","btn","footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,QAAU,yBAAyB,IAAM,qBAAqB,eAAiB,gCAAgC,IAAM,qBAAqB,OAAS,wBAAwB,OAAS,wBAAwB,OAAS,0B,iBCAxRD,EAAOC,QAAU,CAAC,QAAU,0BAA0B,QAAU,0BAA0B,aAAe,iC,iBCAzGD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,wB,kBCA5DD,EAAOC,QAAU,CAAC,UAAY,2B,mFCkBlBC,E,mGCJGC,EARkC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAUC,EAAe,yBAClEC,EAAiBF,EAAQG,IAAEH,MAAQG,IAAEC,QAC3C,OAAO,oCAAQC,UAAWH,GAAoBD,K,iCCLrCK,EAAsC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASF,EAAe,EAAfA,UACpDH,EAAiBG,GAAwBF,IAAEK,UACjD,OACI,sBAAMH,UAAWH,EAAjB,SAAkCK,K,iBFY9BT,K,+BAAAA,E,6CAAAA,E,sCAAAA,E,sBAAAA,M,KGjBL,IAAMW,EAAwC,CACjDC,gBAAgB,EAChBC,UAAW,EACXC,UAAU,EACVC,cAAe,EACfb,MAAO,IAGEc,EAAiB,SAACC,EAAyBC,GACpD,OAAQA,EAAOC,MACX,KAAKnB,EAAMoB,OACR,MAAqC,QAA9BF,EAAOG,QAAQC,WAAf,2BAA0CL,GAA1C,kBAAkDC,EAAOG,QAAQE,MAAQN,EAAMC,EAAOG,QAAQE,OAAS,IAAvG,2BAC0CN,GAD1C,kBACkDC,EAAOG,QAAQE,MAAQN,EAAMC,EAAOG,QAAQE,OAAS,IACjH,KAAKvB,EAAMwB,mBACP,OAAO,2BAAIP,GAAX,IAAkBL,gBAAiBK,EAAML,iBAC7C,KAAKZ,EAAMyB,iBACP,OAAO,2BAAIR,GAAX,kBAAmBC,EAAOG,QAAQK,WAAaR,EAAOG,QAAQE,QAClE,KAAKvB,EAAM2B,SACP,OAAO,2BAAIV,GAAX,IAAkBf,MAAOgB,EAAOG,QAAQZ,UAEhD,OAAOQ,GAGEW,EACyB,SAACF,EAA4BJ,GAA7B,MAAyD,CACvFH,KAAMnB,EAAMoB,OACZC,QAAS,CAACE,MAAOG,EAAWJ,gBAHvBM,EAKyB,iBAAO,CACrCT,KAAMnB,EAAMwB,mBACZH,QAAS,KAPJO,EASoB,SAACF,EAA4BH,GAA7B,MAAgD,CACzEJ,KAAMnB,EAAMyB,iBACZJ,QAAS,CAACK,aAAYH,WAXjBK,EAac,SAACnB,GAAD,MAAsB,CACzCU,KAAMnB,EAAM2B,SACZN,QAAS,CAACZ,aChCLoB,EAAwC,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,SAAUhB,EAAkD,EAAlDA,UAAWD,EAAuC,EAAvCA,UAAWX,EAA4B,EAA5BA,MAAO6B,EAAqB,EAArBA,gBAE1F,OACI,sBAAKxB,UAAWF,IAAE2B,QAAlB,UACI,mDACA,sBAAKzB,UAAWF,IAAE4B,QAAlB,UACI,8CACA,cAAC,EAAD,CAAQC,SAAU,IACVC,SAAwB,IAAdrB,EACVsB,QAAS,kBAAMN,EAASF,EAAgD,YAAa,WAC7F,+BAAOd,IACP,cAAC,EAAD,CAAQoB,SAAU,IACVhC,QAASA,EACTkC,QAAS,kBAAMN,EAASF,EAAgD,YAAa,cAEjG,sBAAKrB,UAAWF,IAAE4B,QAAlB,UACI,8CACA,cAAC,EAAD,CAAQC,SAAU,IACVhC,QAASA,EACTkC,QAAS,kBAAMN,EAASF,EAAgD,YAAa,WAC7F,+BAAOf,IACP,cAAC,EAAD,CAAQqB,SAAU,IACVE,QAAS,kBAAMN,EAASF,EAAgD,YAAa,cAEjG,sBAAKrB,UAAWF,IAAEgC,aAAlB,UACI,cAAC,EAAD,CAAQD,QAAS,SAACE,GAAD,OAAOP,EAAgBO,EAAEC,cAAcC,YAAYL,WAAYjC,EAAhF,mBACA,cAAC,EAAD,CAAQkC,QAAS,SAACE,GAAD,OAAOP,EAAgBO,EAAEC,cAAcC,YAAYL,WAAYjC,EAAhF,qBAEHA,GAAS,cAAC,EAAD,CAAWO,QAASP,Q,gBCuC3BuC,EApE6B,SAAC,GAAQ,eAEjDC,QAAQC,IAAI,UAEZC,qBAAU,WACN,IAAMC,EAAMC,OAAOC,aAAaC,QAAQ,aAClCC,EAAMH,OAAOC,aAAaC,QAAQ,cACrCC,GAAOJ,KACNf,EAASF,EAA2C,YAAaqB,IACjEnB,EAASF,EAA2C,gBAAiBqB,IACrEnB,EAASF,EAA2C,YAAaiB,OAEtE,IAZ6C,MActBK,qBAAWlC,EAAgBL,GAdL,mBAczCM,EAdyC,KAclCa,EAdkC,KAgBhDc,qBAAU,WACN3B,EAAMH,WAAaG,EAAMJ,UAAYiB,EAASF,EAAqC,kBAC9CE,EAASF,EAAqC,OACpF,CAACX,EAAMJ,UAAWI,EAAMH,YAE3B,IAAMiB,EAAkB,SAACZ,GAClBF,EAAML,gBAA2B,UAATO,EACvBW,EAASF,EAA2C,gBAAiBX,EAAMH,YACrEG,EAAML,gBACZkB,EAASF,KACTE,EAASF,EAA2C,gBAAiBX,EAAMH,YAC3EiC,aAAaI,QAAQ,WAAYC,KAAKC,UAAUpC,EAAMJ,YACtDkC,aAAaI,QAAQ,WAAYC,KAAKC,UAAUpC,EAAMH,aAEtDgB,EAASF,MAIjB,OACI,sBAAKrB,UAAWF,IAAEiD,eAAlB,UACI,qBAAK/C,UAAWF,IAAEkD,OAAlB,SACI,sBAAMhD,UAAWU,EAAML,eAAiBP,IAAEmD,OAAS,GAAIpB,QAAS,SAACE,GAAD,OAAOP,EAAgBO,EAAEC,cAAcC,YAAvG,wBAEJ,qBAAKjC,UAAWU,EAAMF,gBAAkBE,EAAMJ,UAAYR,IAAEoD,QAAU,IAAMpD,IAAEqD,IAAMrD,IAAEoD,QAAtF,SACKxC,EAAMF,gBAEX,sBAAKR,UAAWF,IAAEsD,eAAlB,UACI,cAAC,EAAD,CAAQzB,SAAU,MACVC,SAAUlB,EAAMF,eAAeE,EAAMJ,aAAeI,EAAMf,MAC1DK,UAAWF,IAAEuD,IACbxB,QAAS,kBAAIN,EAASF,EAAgD,gBAAiB,WAC/F,cAAC,EAAD,CAAQM,SAAU,QACVC,SAAUlB,EAAMF,gBAAgBE,EAAMH,aAAeG,EAAMf,MAC3DK,UAAWF,IAAEuD,IACbxB,QAAS,kBAAIN,EAASF,EAA2C,gBAAiBX,EAAMH,kBAEnGG,EAAML,gBAAkB,cAAC,EAAD,CAAUC,UAAWI,EAAMJ,UACvBC,UAAWG,EAAMH,UACjBiB,gBAAiBA,EACjB7B,MAAOe,EAAMf,MACb4B,SAAUA,IACvC,sBAAKvB,UAAWF,IAAEwD,OAAlB,UACI,mDAAsB5C,EAAMH,aAC5B,mDAAsBG,EAAMJ,oBCrD7BiD,EATH,WAER,OACE,qBAAKvD,UAAU,cAAf,SACI,cAAC,EAAD,OCMKwD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.733f08c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"counter_counterWrapper__3tC1R\",\"counter\":\"counter_counter__2YnyU\",\"red\":\"counter_red__2m8zK\",\"buttonsWrapper\":\"counter_buttonsWrapper__1dM7_\",\"btn\":\"counter_btn__hkvmD\",\"header\":\"counter_header__2MAUr\",\"active\":\"counter_active__29DxB\",\"footer\":\"counter_footer__3uzB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"settings_wrapper__1VO3X\",\"control\":\"settings_control__1v9Xo\",\"conservation\":\"settings_conservation___6Vo5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"button_default__2JwxQ\",\"error\":\"button_error__2PSF7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanError\":\"error_spanError__2WAa5\"};","export type CounterStateType = {\r\n    isShowSettings: boolean\r\n    maxNumber: number\r\n    minNumber: number\r\n    counterNumber: number\r\n    error: string\r\n}\r\n\r\ntype ActionMap<M extends { [index: string]: any }> = {\r\n    [Key in keyof M]: M[Key] extends undefined\r\n        ? {\r\n            type: Key;\r\n        }\r\n        : {\r\n            type: Key;\r\n            payload: M[Key];\r\n        }\r\n};\r\n\r\nexport enum Types {\r\n    Change = \"CHANGING-VALUE-NUMBER\",\r\n    ToggleShowSettings = 'TOGGLE-IS-SHOW-SETTINGS',\r\n    SetCounterNumber = 'SET-COUNTER-NUMBER',\r\n    SetError = 'SET-ERROR'\r\n}\r\n\r\nexport type MutableKeyType = \"maxNumber\" | \"minNumber\" | \"counterNumber\"\r\n\r\nexport type ChangeType = \"inc\" | \"dec\"\r\n\r\ntype CounterPayload = {\r\n    [Types.SetCounterNumber]: {\r\n        mutableKey: MutableKeyType\r\n        value: number\r\n    },\r\n    [Types.SetError]: {\r\n        message: string\r\n    },\r\n    [Types.Change]: {\r\n        value: MutableKeyType\r\n        changeType: string\r\n    },\r\n    [Types.ToggleShowSettings] : {\r\n\r\n    }\r\n}\r\n\r\nexport type CounterActionsType = ActionMap<CounterPayload>[keyof ActionMap<CounterPayload>]\r\n","/***********************Button**************************/\r\nimport React from 'react';\r\nimport {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './button.module.css'\r\n\r\n\r\n\r\nconst Button: React.FC<DefaultButtonPropsType> = ({error, ...restProps}) => {\r\n    const finalClassName = error ? s.error : s.default\r\n    return <button className={finalClassName} {...restProps}/>\r\n}\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>,HTMLButtonElement> & {\r\n    error?:boolean\r\n}\r\nexport default Button\r\n/**********************************************************/","/***********************Error**************************/\r\nimport React from 'react';\r\nimport s from './error.module.css'\r\n\r\nexport const SpanError: React.FC<ErrorPropsType> = ({message, className}) => {\r\n    const finalClassName = className ? className : s.spanError\r\n    return (\r\n        <span className={finalClassName}>{message}</span>\r\n    )\r\n}\r\n\r\ntype ErrorPropsType = {\r\n    className?: string\r\n    message: string\r\n}\r\n\r\n/**********************************************************/","import {ChangeType, CounterActionsType, CounterStateType, MutableKeyType, Types} from './counter_types';\r\n\r\nexport const counterInitialState: CounterStateType = {\r\n    isShowSettings: false,\r\n    maxNumber: 5,\r\n    minNumber:0,\r\n    counterNumber: 0,\r\n    error: ''\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType, action: CounterActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case Types.Change:\r\n           return action.payload.changeType === 'inc' ? {...state, [action.payload.value]: state[action.payload.value] + 1}\r\n                                                      : {...state, [action.payload.value]: state[action.payload.value] - 1}\r\n        case Types.ToggleShowSettings:\r\n            return {...state, isShowSettings: !state.isShowSettings}\r\n        case Types.SetCounterNumber:\r\n            return {...state, [action.payload.mutableKey]: action.payload.value}\r\n        case Types.SetError:\r\n            return {...state, error: action.payload.message}\r\n    }\r\n    return state\r\n}\r\n\r\nexport const counterActions = {\r\n    changingValueNumberActionCreator: (mutableKey: MutableKeyType, changeType: ChangeType) => ({\r\n        type: Types.Change,\r\n        payload: {value: mutableKey,changeType}\r\n    } as const),\r\n    toggleIsSowSettingsActionCreator: () => ({\r\n        type: Types.ToggleShowSettings,\r\n        payload: {}\r\n    } as const),\r\n    setValueNumberActionCreator: (mutableKey: MutableKeyType, value: number) => ({\r\n        type: Types.SetCounterNumber,\r\n        payload: {mutableKey, value}\r\n    } as const),\r\n    setErrorActionCreator: (message: string) => ({\r\n        type: Types.SetError,\r\n        payload: {message}\r\n    } as const),\r\n}","/***********************Settings**************************/\r\nimport React from 'react';\r\nimport s from './settings.module.css'\r\nimport Button from '../button/Button';\r\nimport {SpanError} from '../error/Error';\r\nimport {CounterActionsType} from '../counter/counter_types';\r\nimport {counterActions} from '../counter/counterReducer';\r\n\r\nexport const Settings: React.FC<SettingsPropsType> = ({dispatch, minNumber, maxNumber, error, onClickSettings}) => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div>Counter settings</div>\r\n            <div className={s.control}>\r\n                <span>Min value:</span>\r\n                <Button children={\"-\"}\r\n                        disabled={minNumber === 0}\r\n                        onClick={() => dispatch(counterActions.changingValueNumberActionCreator('minNumber', 'dec')) }/>\r\n                <span>{minNumber}</span>\r\n                <Button children={\"+\"}\r\n                        error={!!error}\r\n                        onClick={() => dispatch(counterActions.changingValueNumberActionCreator('minNumber', 'inc'))}/>\r\n            </div>\r\n            <div className={s.control}>\r\n                <span>Max value:</span>\r\n                <Button children={\"-\"}\r\n                        error={!!error}\r\n                        onClick={() => dispatch(counterActions.changingValueNumberActionCreator('maxNumber', 'dec'))}/>\r\n                <span>{maxNumber}</span>\r\n                <Button children={\"+\"}\r\n                        onClick={() => dispatch(counterActions.changingValueNumberActionCreator('maxNumber', 'inc'))}/>\r\n            </div>\r\n            <div className={s.conservation}>\r\n                <Button onClick={(e) => onClickSettings(e.currentTarget.innerHTML)} disabled={!!error}>Apply</Button>\r\n                <Button onClick={(e) => onClickSettings(e.currentTarget.innerHTML)} disabled={!!error}>Save</Button>\r\n            </div>\r\n            {error && <SpanError message={error}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype SettingsPropsType = {\r\n    dispatch:  React.Dispatch<CounterActionsType>\r\n    minNumber: number\r\n    maxNumber: number\r\n    error: string\r\n    onClickSettings:(type: string) => void\r\n}\r\n\r\n\r\n/**********************************************************/","/***********************Counter**************************/\r\nimport React, {useEffect, useReducer} from 'react';\r\nimport Button from '../button/Button';\r\nimport {Settings} from '../settings/Settings';\r\nimport s from './counter.module.css'\r\nimport {counterActions, counterInitialState, counterReducer} from './counterReducer';\r\n\r\nconst Counter: React.FC<CounterPropsType> = ({}) => {\r\n\r\n    console.log('render')\r\n\r\n    useEffect(() => {\r\n        const max = Number(localStorage.getItem('maxValue'))\r\n        const min = Number(localStorage.getItem('minValue'))\r\n        if(min || max){\r\n            dispatch(counterActions.setValueNumberActionCreator('minNumber', min))\r\n            dispatch(counterActions.setValueNumberActionCreator('counterNumber', min))\r\n            dispatch(counterActions.setValueNumberActionCreator('maxNumber', max))\r\n        }\r\n    }, [])\r\n\r\n    const [state, dispatch] = useReducer(counterReducer, counterInitialState)\r\n\r\n    useEffect(() => {\r\n        state.minNumber >= state.maxNumber ? dispatch(counterActions.setErrorActionCreator('Invalid value')) :\r\n                                             dispatch(counterActions.setErrorActionCreator(''))\r\n    }, [state.maxNumber, state.minNumber])\r\n\r\n    const onClickSettings = (type: string) => {\r\n        if(state.isShowSettings && type === \"Apply\") {\r\n            dispatch(counterActions.setValueNumberActionCreator('counterNumber', state.minNumber))\r\n        } else if(state.isShowSettings){\r\n            dispatch(counterActions.toggleIsSowSettingsActionCreator())\r\n            dispatch(counterActions.setValueNumberActionCreator('counterNumber', state.minNumber))\r\n            localStorage.setItem('maxValue', JSON.stringify(state.maxNumber))\r\n            localStorage.setItem('minValue', JSON.stringify(state.minNumber))\r\n        } else {\r\n            dispatch(counterActions.toggleIsSowSettingsActionCreator())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <div className={s.header}>\r\n                <span className={state.isShowSettings ? s.active : ''} onClick={(e) => onClickSettings(e.currentTarget.innerHTML)}>settings</span>\r\n            </div>\r\n            <div className={state.counterNumber === state.maxNumber ? s.counter + ' ' + s.red : s.counter}>\r\n                {state.counterNumber}\r\n            </div>\r\n            <div className={s.buttonsWrapper}>\r\n                <Button children={'inc'}\r\n                        disabled={state.counterNumber>=state.maxNumber || !!state.error}\r\n                        className={s.btn}\r\n                        onClick={()=>dispatch(counterActions.changingValueNumberActionCreator('counterNumber', 'inc'))}/>\r\n                <Button children={'reset'}\r\n                        disabled={state.counterNumber===state.minNumber || !!state.error}\r\n                        className={s.btn}\r\n                        onClick={()=>dispatch(counterActions.setValueNumberActionCreator('counterNumber', state.minNumber))}/>\r\n            </div>\r\n            {state.isShowSettings && <Settings maxNumber={state.maxNumber}\r\n                                         minNumber={state.minNumber}\r\n                                         onClickSettings={onClickSettings}\r\n                                         error={state.error}\r\n                                         dispatch={dispatch}/>}\r\n            <div className={s.footer}>\r\n                <span>Minimum value: {state.minNumber}</span>\r\n                <span>Maximum value: {state.maxNumber}</span>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\ntype CounterPropsType = {}\r\nexport default Counter\r\n/**********************************************************/","import React from 'react';\nimport './App.css'\nimport Counter from './components/counter/Counter';\n\nconst App = () => {\n\n    return (\n      <div className='app-wrapper'>\n          <Counter />\n      </div>\n    )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}