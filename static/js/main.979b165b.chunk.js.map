{"version":3,"sources":["components/counter/counter.module.css","components/settings/settings.module.css","components/button/button.module.css","components/error/error.module.css","components/counter/counter_types.ts","components/button/Button.tsx","components/error/Error.tsx","components/settings/Settings.tsx","components/counter/counterReducer.tsx","components/counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Types","Button","error","restProps","finalClassName","s","default","className","SpanError","message","spanError","Settings","minNumber","maxNumber","onClickSettings","useEffect","setSettingsMaxNumber","setSettingsMinNumber","useState","settingsMaxNumber","settingsMinNumber","settingsError","setSettingsError","changingValueNumberHandler","stateValue","type","wrapper","control","children","disabled","onClick","conservation","e","currentTarget","innerHTML","counterInitialState","isShowSettings","counterNumber","counterReducer","state","action","Change","payload","changeType","value","ToggleShowSettings","SetCounterNumber","mutableKey","counterActions","Counter","max","Number","localStorage","getItem","min","dispatch","useReducer","counterWrapper","header","active","counter","red","buttonsWrapper","btn","setItem","JSON","stringify","footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.979b165b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"counter_counterWrapper__3tC1R\",\"counter\":\"counter_counter__2YnyU\",\"red\":\"counter_red__2m8zK\",\"buttonsWrapper\":\"counter_buttonsWrapper__1dM7_\",\"btn\":\"counter_btn__hkvmD\",\"header\":\"counter_header__2MAUr\",\"active\":\"counter_active__29DxB\",\"footer\":\"counter_footer__3uzB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"settings_wrapper__1VO3X\",\"control\":\"settings_control__1v9Xo\",\"conservation\":\"settings_conservation___6Vo5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"button_default__2JwxQ\",\"error\":\"button_error__2PSF7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanError\":\"error_spanError__2WAa5\"};","export type CounterStateType = {\r\n    isShowSettings: boolean\r\n    maxNumber: number\r\n    minNumber: number\r\n    counterNumber: number\r\n}\r\n\r\ntype ActionMap<M extends { [index: string]: any }> = {\r\n    [Key in keyof M]: M[Key] extends undefined\r\n        ? {\r\n            type: Key;\r\n        }\r\n        : {\r\n            type: Key;\r\n            payload: M[Key];\r\n        }\r\n};\r\n\r\nexport enum Types {\r\n    Change = \"CHANGING-VALUE-NUMBER\",\r\n    ToggleShowSettings = 'TOGGLE-IS-SHOW-SETTINGS',\r\n    SetCounterNumber = 'SET-COUNTER-NUMBER',\r\n}\r\n\r\nexport type MutableKeyType = \"maxNumber\" | \"minNumber\" | \"counterNumber\"\r\n\r\nexport type ChangeType = \"inc\" | \"dec\"\r\n\r\ntype CounterPayload = {\r\n    [Types.SetCounterNumber]: {\r\n        mutableKey: MutableKeyType\r\n        value: number\r\n    },\r\n    [Types.Change]: {\r\n        value: MutableKeyType\r\n        changeType: string\r\n    },\r\n    [Types.ToggleShowSettings] : {\r\n\r\n    }\r\n}\r\n\r\nexport type CounterActionsType = ActionMap<CounterPayload>[keyof ActionMap<CounterPayload>]\r\n","/***********************Button**************************/\r\nimport React from 'react';\r\nimport {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './button.module.css'\r\n\r\n\r\n\r\nconst Button: React.FC<DefaultButtonPropsType> = ({error, ...restProps}) => {\r\n    const finalClassName = error ? s.error : s.default\r\n    return <button className={finalClassName} {...restProps}/>\r\n}\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>,HTMLButtonElement> & {\r\n    error?:boolean\r\n}\r\nexport default Button\r\n/**********************************************************/","/***********************Error**************************/\r\nimport React from 'react';\r\nimport s from './error.module.css'\r\n\r\nexport const SpanError: React.FC<ErrorPropsType> = ({message, className}) => {\r\n    const finalClassName = className ? className : s.spanError\r\n    return (\r\n        <span className={finalClassName}>{message}</span>\r\n    )\r\n}\r\n\r\ntype ErrorPropsType = {\r\n    className?: string\r\n    message: string\r\n}\r\n\r\n/**********************************************************/","/***********************Settings**************************/\r\nimport React ,{useEffect, useState} from 'react';\r\nimport s from './settings.module.css'\r\nimport Button from '../button/Button';\r\nimport {SpanError} from '../error/Error';\r\nimport {CounterActionsType} from '../counter/counter_types';\r\n\r\nexport const Settings: React.FC<SettingsPropsType> = ({minNumber, maxNumber, onClickSettings}) => {\r\n\r\n    useEffect(() => {\r\n        setSettingsMaxNumber(maxNumber)\r\n        setSettingsMinNumber(minNumber)\r\n    },[])\r\n\r\n    const [settingsMaxNumber, setSettingsMaxNumber] = useState(0)\r\n    const [settingsMinNumber, setSettingsMinNumber] = useState(0)\r\n    const [settingsError, setSettingsError] = useState('')\r\n\r\n    const changingValueNumberHandler = (stateValue: 'min' | 'max', type: 'inc' | 'dec') => {\r\n        if(type === 'dec') {\r\n            stateValue === 'min' ? setSettingsMinNumber(settingsMinNumber - 1) :\r\n                                   setSettingsMaxNumber(settingsMaxNumber - 1)\r\n        }\r\n        if(type === 'inc') {\r\n            stateValue === 'min' ? setSettingsMinNumber(settingsMinNumber + 1) :\r\n                                   setSettingsMaxNumber(settingsMaxNumber + 1)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(settingsMaxNumber <= settingsMinNumber) {\r\n            setSettingsError('Invalid value')\r\n        } else {\r\n            setSettingsError('')\r\n        }\r\n\r\n    },[settingsMaxNumber, settingsMinNumber])\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div>Counter settings</div>\r\n            <div className={s.control}>\r\n                <span>Min value:</span>\r\n                <Button children={\"-\"}\r\n                        disabled={settingsMinNumber === 0}\r\n                        onClick={() => changingValueNumberHandler('min', 'dec')}/>\r\n                <span>{settingsMinNumber}</span>\r\n                <Button children={\"+\"}\r\n                        error={!!settingsError}\r\n                        onClick={() => changingValueNumberHandler('min', 'inc')}/>\r\n            </div>\r\n            <div className={s.control}>\r\n                <span>Max value:</span>\r\n                <Button children={\"-\"}\r\n                        error={!!settingsError}\r\n                        onClick={() => changingValueNumberHandler('max', 'dec')}/>\r\n                <span>{settingsMaxNumber}</span>\r\n                <Button children={\"+\"}\r\n                        onClick={() => changingValueNumberHandler('max', 'inc')}/>\r\n            </div>\r\n            <div className={s.conservation}>\r\n                <Button onClick={(e) => onClickSettings(e.currentTarget.innerHTML, settingsMinNumber, settingsMaxNumber)}\r\n                        disabled={!!settingsError}>\r\n                    Apply\r\n                </Button>\r\n                <Button onClick={(e) => onClickSettings(e.currentTarget.innerHTML, settingsMinNumber, settingsMaxNumber)}\r\n                        disabled={!!settingsError}>\r\n                    Save\r\n                </Button>\r\n            </div>\r\n            {settingsError && <SpanError message={settingsError}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype SettingsPropsType = {\r\n    minNumber: number\r\n    maxNumber: number\r\n    onClickSettings:(type: string, minNumber: number, maxNumber: number) => void\r\n}\r\n\r\n\r\n/**********************************************************/","import {ChangeType, CounterActionsType, CounterStateType, MutableKeyType, Types} from './counter_types';\r\n\r\nexport const counterInitialState: CounterStateType = {\r\n    isShowSettings: false,\r\n    maxNumber: 5,\r\n    minNumber:0,\r\n    counterNumber: 0,\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType, action: CounterActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case Types.Change:\r\n           return action.payload.changeType === 'inc' ? {...state, [action.payload.value]: state[action.payload.value] + 1}\r\n                                                      : {...state, [action.payload.value]: state[action.payload.value] - 1}\r\n        case Types.ToggleShowSettings:\r\n            return {...state, isShowSettings: !state.isShowSettings}\r\n        case Types.SetCounterNumber:\r\n            return {...state, [action.payload.mutableKey]: action.payload.value}\r\n    }\r\n    return state\r\n}\r\n\r\nexport const counterActions = {\r\n    changingValueNumberActionCreator: (mutableKey: MutableKeyType, changeType: ChangeType) => ({\r\n        type: Types.Change,\r\n        payload: {value: mutableKey,changeType}\r\n    } as const),\r\n    toggleIsSowSettingsActionCreator: () => ({\r\n        type: Types.ToggleShowSettings,\r\n        payload: {}\r\n    } as const),\r\n    setValueNumberActionCreator: (mutableKey: MutableKeyType, value: number) => ({\r\n        type: Types.SetCounterNumber,\r\n        payload: {mutableKey, value}\r\n    } as const),\r\n}","/***********************Counter**************************/\r\nimport React, {useEffect, useReducer} from 'react';\r\nimport Button from '../button/Button';\r\nimport {Settings} from '../settings/Settings';\r\nimport s from './counter.module.css'\r\nimport {counterActions, counterInitialState, counterReducer} from './counterReducer';\r\n\r\nconst Counter: React.FC<CounterPropsType> = ({}) => {\r\n\r\n    useEffect(() => {\r\n        const max = Number(localStorage.getItem('maxValue'))\r\n        const min = Number(localStorage.getItem('minValue'))\r\n        if(min || max){\r\n            dispatch(counterActions.setValueNumberActionCreator('minNumber', min))\r\n            dispatch(counterActions.setValueNumberActionCreator('counterNumber', min))\r\n            dispatch(counterActions.setValueNumberActionCreator('maxNumber', max))\r\n        }\r\n    }, [])\r\n\r\n    const [state, dispatch] = useReducer(counterReducer, counterInitialState)\r\n\r\n    const onClickSettingsHandler = (type: string, settingsMinNumber:number, settingsMaxNumber:number) => {\r\n        if(state.isShowSettings && type === \"Apply\") {\r\n            dispatch(counterActions.setValueNumberActionCreator('counterNumber', settingsMinNumber))\r\n            dispatch(counterActions.setValueNumberActionCreator('minNumber', settingsMinNumber))\r\n            dispatch(counterActions.setValueNumberActionCreator('maxNumber', settingsMaxNumber))\r\n        } else if(state.isShowSettings){\r\n            dispatch(counterActions.toggleIsSowSettingsActionCreator())\r\n            dispatch(counterActions.setValueNumberActionCreator('counterNumber', settingsMinNumber))\r\n            dispatch(counterActions.setValueNumberActionCreator('minNumber', settingsMinNumber))\r\n            dispatch(counterActions.setValueNumberActionCreator('maxNumber', settingsMaxNumber))\r\n            localStorage.setItem('maxValue', JSON.stringify(state.maxNumber))\r\n            localStorage.setItem('minValue', JSON.stringify(state.minNumber))\r\n        } else {\r\n            dispatch(counterActions.toggleIsSowSettingsActionCreator())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <div className={s.header}>\r\n                <span className={state.isShowSettings ? s.active : ''}\r\n                      onClick={() => dispatch(counterActions.toggleIsSowSettingsActionCreator())}>\r\n                    settings\r\n                </span>\r\n            </div>\r\n            <div className={state.counterNumber === state.maxNumber ? s.counter + ' ' + s.red : s.counter}>\r\n                {state.counterNumber}\r\n            </div>\r\n            <div className={s.buttonsWrapper}>\r\n                <Button children={'inc'}\r\n                        disabled={state.counterNumber>=state.maxNumber}\r\n                        className={s.btn}\r\n                        onClick={()=>dispatch(counterActions.changingValueNumberActionCreator('counterNumber', 'inc'))}/>\r\n                <Button children={'reset'}\r\n                        disabled={state.counterNumber===state.minNumber}\r\n                        className={s.btn}\r\n                        onClick={()=>dispatch(counterActions.setValueNumberActionCreator('counterNumber', state.minNumber))}/>\r\n            </div>\r\n            {state.isShowSettings && <Settings maxNumber={state.maxNumber}\r\n                                         minNumber={state.minNumber}\r\n                                         onClickSettings={onClickSettingsHandler}/>}\r\n            <div className={s.footer}>\r\n                <span>Minimum value: {state.minNumber}</span>\r\n                <span>Maximum value: {state.maxNumber}</span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\ntype CounterPropsType = {}\r\nexport default Counter\r\n/**********************************************************/","import React from 'react';\nimport './App.css'\nimport Counter from './components/counter/Counter';\n\nconst App = () => {\n\n    return (\n      <div className='app-wrapper'>\n          <Counter />\n      </div>\n    )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}